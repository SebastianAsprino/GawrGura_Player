# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
from api_youtube import *
from metadata import *
from playMusic import *
from tkinter import *
from tkinter import Entry, PhotoImage, Listbox, filedialog, messagebox
from PIL import Image, ImageTk
import tkinter as tk
from pathlib import Path
import webbrowser
from tinytag import TinyTag
import pygame
from customtkinter import CTkSlider
import psutil
import os

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

pygame.mixer.init()

class gui:
    def __init__(self, app = tk.Tk()):
        self.app = app
        self.app.geometry('800x600')
        self.app.configure(bg = "#FFFFFF")
        self.app.title("Music Player")
        self.app.iconbitmap(".image/gura.ico")
        self.canvas = tk.Canvas(self.app,bg = "#FFFFFF", height = 800, width = 800, bd = 0, highlightthickness = 0, relief = "ridge")

        #FONDO
        self.canvas.place(x = 0, y = 0)
        self.image_image_1 = ImageTk.PhotoImage(file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(400.0, 300.0, image=self.image_image_1)
        
        #CANCIONES
        self.entry_image_2 = PhotoImage(file=relative_to_assets("entry_2.png"))
        self.entry_bg_2 = self.canvas.create_image(256, 323.6, image=self.entry_image_2)
        
        #PORTADA
        #SELECCIONA LA IMAGEN A MOSTRAR
        self.canvas.place(x = 0, y = 0)
        if os.path.exists('build_demo2 (elolcol)/assets/image_2.png'):
            self.image_image_2 = (Image.open('build_demo2 (elolcol)/assets/image_2.png'))
            if os.path.exists('build_demo2 (elolcol)/assets/cover_rounded.png'):
                self.image_image_2 = (Image.open('build_demo2 (elolcol)/assets/cover_rounded.png'))

        def on_closing():
            if os.path.exists('build_demo2 (elolcol)/assets/cover_rounded.png'):
                os.remove('build_demo2 (elolcol)/assets/cover_rounded.png')
        
        #REESCALADO
        self.resize_image_image_2 = self.image_image_2.resize((230,230))
        
        self.image_image_2 = ImageTk.PhotoImage(self.resize_image_image_2)
        self.image_1 = self.canvas.create_image(640.0, 156.0, image=self.image_image_2)

        #NOMBRE
        self.label_name = Label(self.app, anchor="nw", text="Nombre", bg="#2d4869", fg="#FFFFFF", font=("Inter", 18))
        self.label_name.place(x=537, y=296.7)

        #ARTISTA
        self.label_artist = Label(self.app, anchor="nw", text="Artista", bg="#2d4869", fg="#FFFFFF", font=("Inter", 18))
        self.label_artist.place(x=537, y=334.6)

        #ALBUM
        self.label_album = Label(self.app, anchor="nw", text="Album", bg="#2d4869", fg="#FFFFFF", font=("Inter", 18))
        self.label_album.place(x=537, y=372.1)

        #AÑO
        self.label_year = Label(self.app, anchor="nw", text="Año", bg="#2d4869", fg="#FFFFFF", font=("Inter", 18))
        self.label_year.place(x=537, y=407.9)

        #LISTBOX
        self.song_box = Listbox(self.app, bg="#55C1CC", fg="#E0E0E3", width=37, height=22, bd=0, highlightcolor="#FFFFFF")
        self.song_box.place(x=33, y=81)

        #SCROLLBAR
        self.scroll = Scrollbar(app, command=self.song_box.yview, repeatinterval=100)
        self.scroll.place(x=461, y=81, height=485)

        self.song_box.config(relief="flat", justify="left", font=("UD Digi Kyokasho NK-R", 18 * -1), yscrollcommand=self.scroll.set)

        #BARRA_REPRODUCCION
        self.slider = CTkSlider(height=20, width=264,  bg_color="#2D4869", fg_color="#e0e0e3", progress_color="#55C1CC", button_color="#feebe3", button_hover_color="#feebe3", from_=0, to=1)
        self.slider.place(x=508, y=453.4)
        self.slider.set(0)

        #YOUTUBE
        self.button_image_1 = ImageTk.PhotoImage(file=relative_to_assets("button_1.png"))
        self.button_1 = self.canvas.create_image(448, 45.6, image=self.button_image_1, tag='Button_1')
        self.canvas.tag_bind(self.button_1, "<Button>", lambda event: print('Button_1 clicked'))

        #SPOTIFY
        self.button_image_2 = ImageTk.PhotoImage(file=relative_to_assets("button_2.png"))
        self.button_2 = self.canvas.create_image(480, 45.6, image=self.button_image_2, tag='Button_2')
        self.canvas.tag_bind(self.button_2, "<Button>", lambda event: print('Button_2 clicked'))

        #BARRA BUSQUEDA
        self.entry_image_1 = ImageTk.PhotoImage(file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(224, 45.6, image=self.entry_image_1)
        self.entry_1 = Entry( bd=0, bg="#E0E0E3", highlightthickness=0, cursor="xterm", justify="left", font=("UD Digi Kyokasho NK-R", 24 * -1))
        self.entry_1.place( x=50.0, y=31.5, width=368, height=30.0)
        
        #BUSQUEDA
        self.button_image_7 = ImageTk.PhotoImage(file=relative_to_assets("button_7.png"))
        self.button_7 = self.canvas.create_image(32, 45.6, image=self.button_image_7, tag='Button_7')
        self.canvas.tag_bind(self.button_7, "<Button>", lambda event: self.recibe(self.entry_1.get()))

        #ANTERIOR
        self.button_image_3 = ImageTk.PhotoImage(file=relative_to_assets("button_3.png"))
        self.button_3 = self.canvas.create_image(604.5, 493.5, image=self.button_image_3, tag='Button_3')
        self.canvas.tag_bind(self.button_3, "<Button>", lambda event: print('Button_3 clicked'))
        
        #REPRODUCIR Y PAUSA
        self.button_image_4 = ImageTk.PhotoImage(file=relative_to_assets("Button_4.png"))
        self.button_4 = self.canvas.create_image(640, 493.5, image=self.button_image_4, tag='Button_4')
<<<<<<< HEAD
        self.canvas.tag_bind(self.button_4, "<Button>", lambda e: self.play_song())
=======
        self.canvas.tag_bind(self.button_4, "<Button>", lambda e: self.info())
        #self.canvas.tag_bind(self.button_4, "<Button>", lambda e: self.play_song(self.song_box.get(ACTIVE)))
>>>>>>> 41acaead9faf13538ba7945b563c3615092ac71f

        #SIGUIENTE
        self.button_image_6 = ImageTk.PhotoImage(file=relative_to_assets("button_6.png"))
        self.button_6 = self.canvas.create_image(675.5, 493.5, image=self.button_image_6, tag='Button_6')
        self.canvas.tag_bind(self.button_6, "<Button>", lambda event: print('Button_6 clicked'))

        #AÑADIR MUSICA
        self.button_image_8 = ImageTk.PhotoImage(file=relative_to_assets("button_8.png"))
        self.button_8 = self.canvas.create_image(615.2, 549.7, image=self.button_image_8, tag='Button_8')
        self.canvas.tag_bind(self.button_8, "<Button>", lambda e: self.add_song())

        #QUITAR MUSICA
        self.button_image_9 = ImageTk.PhotoImage(file=relative_to_assets("button_9.png"))
        self.button_9 = self.canvas.create_image(664.8, 549.7, image=self.button_image_9, tag='Button_9')
        self.canvas.tag_bind(self.button_9, "<Button>", lambda e: self.put_off_song())

        self.app.resizable(False, False)
        self.app.protocol("WM_DELETE_WINDOW", on_closing())
        self.app.mainloop()

    def info(self):
        self.song = (f'{self.song_box.get(ACTIVE)}.mp3')
        self.AudioMetadata = TinyTag.get(self.song)
        name = self.AudioMetadata.title
        artist = self.AudioMetadata.artist
        album = self.AudioMetadata.album
        year = self.AudioMetadata.year

        self.label_name.config(text=f'{name}')
        self.label_artist.config(text=f'{artist}')
        self.label_album.config(text=f'{album}')
        self.label_year.config(text=f'{year}')

    def add_song(self):
        self.user_info = psutil.users()
        self.user = self.user_info[0][0]
        self.song = filedialog.askopenfilenames(initialdir='Music', title='Choose a music', filetypes=(('mp3 files', '*.mp3'), ))

        for song in self.song:
            self.dir = Path(__file__).parent.absolute()
            self.dir = f'{self.dir}'
            self.dir = self.dir.replace('\\', "/")
            self.dir = self.dir.replace('c:', "C:")
            #print(self.dir)
            song = song.replace(f'{self.dir}', "")
            #print(song)
            self.song_box.insert(END, song)

    def put_off_song(self):
        self.song_box.delete(ACTIVE)

    def play_song(self, entry):
        music = playSong()
        music.play_song(entry)
        #webbrowser.open(self.song)

    def recibe(self,stri):
        api = api_youtube()
        api.recibe_url(stri)

            
